{
  "rules": {
    "transactionFee":{
      // default costs maybe 0.099999 Dirsh
      // 5 times bigger for 3rd party token transfers       
      ".read":"true",
      ".write":"auth.uid=='my-service-worker' && !data.exists() && newData.val()==0.099999"
    },
    "minimumAmountToSend":{ 
      //minimum amount is used so you can't spam another persons account
      //the same for custom tokens
      ".read":"true",
      ".write":"auth.uid=='my-service-worker' && !data.exists() && newData.val()==1"
    },
    "burned":{ 
      //Burned Dirsh tokens are tracked here
      ".read":"auth.uid=='my-service-worker'",
      ".write":"auth.uid=='my-service-worker'",
      "sent":{
      	"$id":{ //all transaction fees are burned
        	".read":"!data.exists()",
          ".write":"!data.exists()",
          // the value is the amount burned (root/transactionFee)
          // 3rd party tokens cost 5 times more to transfer
          // creating gift card also costs 5 times transactionFee
        	".validate":"
          (
            auth.uid=='my-service-worker'?
            (
            	newData.parent().parent().parent().child('users/'+
                    newData.parent().parent().parent().child('sendApi/sender').val()
                  	+'/pendingSent').exists()
              &&
              newData.parent().parent().parent().child('users/'+
                    newData.parent().parent().parent().child('sendApi/sender').val()
                  	+'/pendingSent/tokenType').val()=='Dirsh'?
              	newData.val()==root.child('transactionFee').val()
              	:
              	(
                newData.val()-5*root.child('transactionFee').val()<0.000000001
              	&&
                newData.val()-5*root.child('transactionFee').val()>-0.000000001
              	)
            )
            :
          	(
              (
                newData.parent().parent().parent().child('users/'+auth.uid+'/pendingSent').exists()
                &&
                newData.parent().parent().parent().child('users/'+auth.uid+'/pendingSent').val()
                !=
                root.child('users/'+auth.uid+'/pendingSent').val()
              )
              ?
           		(    
        	      !newData.parent().parent().parent()
      	        .child('users/'+auth.uid+'/latestCouponId').exists()
    	          &&
  	            newData.parent().parent().parent()
	              .child('users/'+auth.uid+'/pendingSent/tokenType').val()=='Dirsh'?
              	newData.val()==root.child('transactionFee').val()
              	:
              	(
                newData.val()-5*root.child('transactionFee').val()<0.000000001
              	&&
                newData.val()-5*root.child('transactionFee').val()>-0.000000001
              	)
            	)
            	:
	            (
  	          	!newData.parent().parent().parent().child('users/'+auth.uid+'/pendingSent').exists()
      	      	&&
        	  		newData.parent().parent().parent().child('users/'+auth.uid+'/latestCouponId').exists()
              	&&
              	newData.parent().parent().parent().child('users/'+auth.uid+'/latestCouponId').val()
              	!=
              	root.child('users/'+auth.uid+'/latestCouponId').val()
  	          	&&
    	        	(
      	        	newData.val()-5*root.child('transactionFee').val()<0.000000001
        	      	&&
          	    	newData.val()-5*root.child('transactionFee').val()>-0.000000001
            		)
	            )
          	)
          )
          ||
          (
          	auth.uid=='my-service-worker'
            &&
            data.exists()
            &&
            !newData.exists()
            &&
            newData.parent().parent().child('totalBurned').val()
            -data.parent().parent().child('totalBurned').val()-data.val()<0.000000001
            &&
            newData.parent().parent().child('totalBurned').val()
            -data.parent().parent().child('totalBurned').val()-data.val()>-0.000000001
            &&
            newData.parent().parent().child('type').val()==0
          )
          "
        }
      },
      "createdTokens":{ // used to retrieve the 1000 dirsh that is used to create custom token
        "$tokenType":{
        	".read":"!data.exists()",
          ".write":"!data.exists()",
          ".validate":"
          (
          	newData.parent().parent().parent().child('tokenTypes/'+$tokenType).exists()
            &&
            !root.child('tokenTypes/'+$tokenType).exists()
          	&& 
            newData.val()==1000
          )
          ||
          (
          	auth.uid=='my-service-worker'
            &&
            data.exists()
            &&
            !newData.exists()
            &&
            newData.parent().parent().child('totalBurned').val()
            -data.parent().parent().child('totalBurned').val()-data.val()<0.000000001
            &&
            newData.parent().parent().child('totalBurned').val()
            -data.parent().parent().child('totalBurned').val()-data.val()>-0.000000001
            &&
            newData.parent().parent().child('type').val()==1
          )"
        }
      },
      "type":{ // 0 is sent, 1 is createdToken and 2 is apiKey creation
      	".validate":"auth.uid=='my-service-worker'
        && 
        (
        	newData.val()==0
          ||
          newData.val()==1
          ||
          newData.val()==2
        )  
        "
      },
      "tempId":{
        ".validate":"newData.isString()"
      },
      "stats":{
        ".read":"true",
    		"totalBurned":{ 
	        //Total burned Dirsh
  	      //This is calculated by Cloud Functions
      	  ".write":"
        		auth.uid=='my-service-worker'
	        	&&
  	        newData.isNumber()
    	    	&&
      	    newData.val()>=0
        		&&
          	(
	          	data.exists()?
  	          (
    	        	newData.val()-data.val()-
      	        (
        	  			(newData.parent().parent().child('type').val()==0)
          				?
                  data.parent().parent().child('sent/'+newData.parent().child('tempId').val()).val()
          				:
                  (newData.parent().parent().child('type').val()==1)
                  ?
                  data.parent().parent().child('createdTokens/'+newData.parent().child('tempId').val()).val()
                  :
                	data.parent().parent().child('apiKey/'+newData.parent().child('tempId').val()).val()
	              )<0.000000001
  	            &&
    	          newData.val()-data.val()-
      	        (
        	  			(newData.parent().parent().child('type').val()==0)
          				?
                  data.parent().parent().child('sent/'+newData.parent().child('tempId').val()).val()
          				:
                  (newData.parent().parent().child('type').val()==1)
                  ?
                  data.parent().parent().child('createdTokens/'+newData.parent().child('tempId').val()).val()
                  :
                	data.parent().parent().child('apiKey/'+newData.parent().child('tempId').val()).val()
	              )>-0.000000001
  	          )
    	        :
      	      (
        	    	newData.val()-
          	    (
          				(newData.parent().parent().child('type').val()==0)
          				?
                  data.parent().parent().child('sent/'+newData.parent().child('tempId').val()).val()
          				:
                  (newData.parent().parent().child('type').val()==1)
                  ?
                  data.parent().parent().child('createdTokens/'+newData.parent().child('tempId').val()).val()
                  :
                	data.parent().parent().child('apiKey/'+newData.parent().child('tempId').val()).val()
    	          )<0.000000001
      	        &&
        	      newData.val()-
          	    (
          				(newData.parent().parent().child('type').val()==0)
          				?
                  data.parent().parent().child('sent/'+newData.parent().child('tempId').val()).val()
          				:
                  (newData.parent().parent().child('type').val()==1)
                  ?
                  data.parent().parent().child('createdTokens/'+newData.parent().child('tempId').val()).val()
                  :
                	data.parent().parent().child('apiKey/'+newData.parent().child('tempId').val()).val()
    	          )>-0.000000001
      	      )
        	  )
	        "	
  	  	},
    		"numberOfTokenTypes":{ 
	      	//used for showing random range of custom tokens (ie. tokens 23-32 out of 97)
					".write":"auth.uid=='my-service-worker' 
          && newData.isNumber() && newData.val()==data.val()+1 &&
      	  	newData.parent().parent().child('totalBurned').val()-data.parent().parent().child('totalBurned').val()-1000
        			>-0.000000001
	        &&	
  	        newData.parent().parent().child('totalBurned').val()-data.parent().parent().child('totalBurned').val()-1000
    	    		<0.000000001"
    		}
      },
      "apiKey":{
        "$uid":{
          ".read":"$uid==auth.uid && !data.exists()",
          ".write":"true",
          ".validate":"
          (
          	newData.parent().parent().parent().child('users/'+auth.uid+'/apiKey').exists()
          	&&	
            !root.child('users/'+auth.uid+'/apiKey').exists()
            &&
            newData.val()-5*root.child('transactionFee').val()>-0.000000001
            &&
            newData.val()-5*root.child('transactionFee').val()<0.000000001
          )
          ||
          (
          	auth.uid=='my-service-worker'
            &&
            newData.parent().parent().child('stats/totalBurned').val()
            	-data.parent().parent().child('stats/totalBurned').val()-data.val()
            	>-0.000000001
            &&
            newData.parent().parent().child('stats/totalBurned').val()
            	-data.parent().parent().child('stats/totalBurned').val()-data.val()
            	<0.000000001
          	&&
            newData.parent().parent().child('type').val()==2
            &&
            !newData.exists()
          )
          "
        }
      },
      "$other":{".validate":"false"}
    },
    "users": {
      "$userId": {
        "balances":{
          ".read": "$userId == auth.uid || 'my-service-worker'==auth.uid",
          "$tokenType":{
            ".write":"newData.isNumber()&&newData.val()>=0&&
            (
              ( // starting distribution
              	!root.exists()
                &&
                'my-service-worker'==auth.uid
               	&&
                $tokenType=='Dirsh'
                &&
                $userId==newData.parent().parent().parent().parent().child('founderAccount').val()
              	&&
              	newData.val()==22500000
              )
              ||
              (//reclaim coupon
              (
              	!root.child('users/'+auth.uid).exists()
              	||
              	(
              	!newData.parent().parent().parent().parent().child('burned/apiKey/'+auth.uid).exists()
              	&&
              	!newData.parent().parent().child('pendingSent').exists()
              	&&
              	!newData.parent().parent().child('processingReceivedId').exists()
              	&&
              	!newData.parent().parent().child('latestTokenType').exists()
              	)
              )
              &&
              newData.parent().parent().child('latestCouponId').exists()
              &&
              newData.parent().parent().parent().parent()
              	.child('coupons/'+newData.parent().parent().child('latestCouponId').val()).val()==null
              &&
              root.child('coupons/'+newData.parent().parent().child('latestCouponId').val()).exists()
              &&
              (data.exists()?data.val():0)-newData.val()+root
              	.child('coupons/'+newData.parent().parent().child('latestCouponId').val()
                      +'/amount').val()>-0.000000001
              &&
              (data.exists()?data.val():0)-newData.val()+root
              	.child('coupons/'+newData.parent().parent().child('latestCouponId').val()
                      +'/amount').val()<0.000000001
             	&&
             	root.child('coupons/'+newData.parent().parent().child('latestCouponId').val()
                      +'/tokenType').val()==$tokenType
              &&
              newData.parent().parent().child('received/'+
                  newData.parent().parent().child('latestCouponId').val()).exists()
              &&
              !data.parent().parent().child('received/'+
                  newData.parent().parent().child('latestCouponId').val()).exists()  
              )
              ||
              (//accepting pendingReceived
                (
                  !root.child('users/'+auth.uid).exists()
              		||
              		(
                	!newData.parent().parent().parent().parent().child('burned/apiKey/'+auth.uid).exists()
              		&&
                	!newData.parent().parent().child('pendingSent').exists()
             	 		&&
                  newData.parent().parent().child('processingReceivedId').val()
                	!=
                	data.parent().parent().child('processingReceivedId').val()
                  &&  
              		!newData.parent().parent().child('latestTokenType').exists()
              		&&
              		!newData.parent().parent().child('latestCouponId').exists()
                	)
                )
                &&
              	newData.parent().parent().child('processingReceivedId').exists()
                &&
                newData.val()-(data.exists()?data.val():0)-data.parent().parent().child(
                	'pendingReceived/'+newData.parent().parent()
                  .child('processingReceivedId').val()+'/amount').val()<0.000000001
                &&
                newData.val()-(data.exists()?data.val():0)-data.parent().parent().child(
                	'pendingReceived/'+newData.parent().parent()
                  .child('processingReceivedId').val()+'/amount').val()>-0.000000001
                &&
                data.parent().parent()
                  .child('pendingReceived/'+newData.parent().parent()
                  .child('processingReceivedId').val()+'/tokenType').val()==$tokenType
              )
              ||
              (//sending tokens
            	!newData.parent().parent().parent().parent().child('burned/apiKey/'+auth.uid).exists()
              &&
              newData.parent().parent().child('pendingSent/id').val()
              !=
          		data.parent().parent().child('pendingSent/id').val()
            	&&
              newData.parent().parent().child('pendingSent/tokenType').val()==$tokenType
              &&
              !newData.parent().parent().child('processingReceivedId').exists()
              &&
              !newData.parent().parent().child('latestTokenType').exists()
              &&
              !newData.parent().parent().child('latestCouponId').exists()
              &&
              newData.parent().parent().child('pendingSent/amount').val()
              -data.val()+newData.val()
                +($tokenType=='Dirsh'?root.child('transactionFee').val():0)
              >-0.000000001
              &&
              newData.parent().parent().child('pendingSent/amount').val()
              -data.val()+newData.val()
              	+($tokenType=='Dirsh'?root.child('transactionFee').val():0)
              <0.000000001  
            	&&
              	(
                $tokenType=='Dirsh'?
    	           true
  	             :
	               	( //3rd party tokens have to pay 5 times transaction fee
                	data.parent().child('Dirsh').val()
        	        -newData.parent().child('Dirsh').val()
        	        -5*root.child('transactionFee').val()>-0.000000001
      	          &&
    	            data.parent().child('Dirsh').val()
  	              -newData.parent().child('Dirsh').val()
	                -5*root.child('transactionFee').val()<0.000000001
                	)
              	)
              )                
              ||
              (//creating new custom tokens
                !newData.parent().parent().parent().parent().child('burned/apiKey/'+auth.uid).exists()
              	&&
                !newData.parent().parent().child('pendingSent').exists()
              	&&
              	!newData.parent().parent().child('processingReceivedId').exists()
              	&&
              	newData.parent().parent().child('latestTokenType').exists()
                &&
                newData.parent().parent().child('latestTokenType').val()
                !=
                data.parent().parent().child('latestTokenType').val()
              	&&
              	!newData.parent().parent().child('latestCouponId').exists()
                &&
                $tokenType==='Dirsh'
                &&
                data.val()-newData.val()-1000>-0.000000001
                &&
                data.val()-newData.val()-1000<0.000000001
              )
              ||
             	(//creating new custom tokens
                !newData.parent().parent().parent().parent().child('burned/apiKey/'+auth.uid).exists()
              	&&
                !newData.parent().parent().child('pendingSent').exists()
              	&&
              	!newData.parent().parent().child('processingReceivedId').exists()
              	&&
              	newData.parent().parent().child('latestTokenType').exists()
                &&
                newData.parent().parent().child('latestTokenType').val()
                !=
                data.parent().parent().child('latestTokenType').val()
              	&&
              	!newData.parent().parent().child('latestCouponId').exists()
                &&
                newData.parent().parent().parent().parent().child('tokenTypes/'+$tokenType).exists()
                &&
                !root.child('tokenTypes/'+$tokenType).exists()
                &&
              	newData.parent().parent().parent().parent().child('tokenTypes/'+$tokenType+
                     '/totalSupply').val()==newData.val()
              )
              ||
              (//create coupon
              	!newData.parent().parent().parent().parent().child('burned/apiKey/'+auth.uid).exists()
              	&&
                !newData.parent().parent().child('pendingSent').exists()
              	&&
              	!newData.parent().parent().child('processingReceivedId').exists()
              	&&
              	!newData.parent().parent().parent().parent().child('latestTokenType').exists()
                &&
                newData.parent().parent().child('latestCouponId').exists()
                &&
                newData.parent().parent().child('latestCouponId').val()
                !=
                data.parent().parent().child('latestCouponId').val()
                &&
                newData.parent().parent().child('coupons/'+
              		newData.parent().parent().child('latestCouponId').val()).exists()
                &&
                !data.parent().parent().child('coupons/'+
              		newData.parent().parent().child('latestCouponId').val()).exists()
                &&
                newData.parent().parent().child('coupons/'+newData.parent().parent()
                  .child('latestCouponId').val()+'/tokenType').val()=='Dirsh'?
                (
                	$tokenType=='Dirsh'
                	&&
                	data.val()-newData.val()-newData.parent().parent().child('coupons/'+
              		newData.parent().parent().child('latestCouponId').val()+'/amount').val()
                		-5*root.child('transactionFee').val()
                		>-0.000000001
                	&&
                	data.val()-newData.val()-newData.parent().parent().child('coupons/'+
              		newData.parent().parent().child('latestCouponId').val()+'/amount').val()
                		-5*root.child('transactionFee').val()
                		<0.000000001
                )
                :
                (
                  $tokenType=='Dirsh'?
                  (
                  	data.val()-newData.val()-5*root.child('transactionFee').val()
                		>-0.000000001
                    &&
                    data.val()-newData.val()-5*root.child('transactionFee').val()
                		<0.000000001
                  )
                  :
                  (
                   newData.parent().parent().child('coupons/'+newData.parent().parent()
                  	.child('latestCouponId').val()+'/tokenType').val()==$tokenType
                    &&
                    data.val()-newData.val()-newData.parent().parent().child('coupons/'+
              			newData.parent().parent().child('latestCouponId').val()+'/amount').val()
                		>-0.000000001
                    &&
                    data.val()-newData.val()-newData.parent().parent().child('coupons/'+
              			newData.parent().parent().child('latestCouponId').val()+'/amount').val()
                		<0.000000001
                  )                  
                )
              )
            	||
              (// create apiKey
                newData.parent().parent().parent().parent().child('burned/apiKey/'+auth.uid).exists()
                &&
                !root.child('burned/apiKey/'+auth.uid).exists()
                &&
              	newData.parent().parent().child('apiKey').exists()
                &&
                !data.parent().parent().child('apiKey').exists()
                &&
                $tokenType=='Dirsh'
                &&
                !newData.parent().parent().child('pendingSent').exists()
              	&&
              	!newData.parent().parent().child('processingReceivedId').exists()
              	&&
              	!newData.parent().parent().child('latestTokenType').exists()
              	&&
              	!newData.parent().parent().child('latestCouponId').exists()
              )
            )
            "
    	    }
        },
        "pendingSent":{
          ".read": "$userId == auth.uid || 'my-service-worker'==auth.uid",
          ".write":"!newData.exists()||(newData.hasChildren(['id','tokenType','amount','receiverAddress']))",
          "id":{ // random id created by firebase database reference push() function
            ".validate":"
            		newData.isString()
            		&&
                newData.val()!=data.val()
              	&&
              	!data.parent().parent().parent().parent().child('burned/sent/'+newData.val()).exists()
            		&&
                newData.parent().parent().parent().parent()
	               	.child('burned/sent/'+newData.val()).val()
                	-((newData.parent().child('tokenType').val()=='Dirsh')?
                		root.child('transactionFee').val():5*root.child('transactionFee').val())
                    <0.000000001
                &&
                newData.parent().parent().parent().parent()//pay only once transfer fee
	               	.child('burned/sent/'+newData.val()).val()
                	-((newData.parent().child('tokenType').val()=='Dirsh')?
                		root.child('transactionFee').val():5*root.child('transactionFee').val())
                    >-0.000000001
                &&
                newData.parent().child('amount').exists()
                &&
                newData.parent().child('receiverAddress').exists()
            "
          },
	        "tokenType":{
  	      	".validate":"
            data.parent().parent().child('balances/'+newData.val()).exists()
            &&
            data.parent().parent().child('balances/'+newData.val()).val()
            >
            newData.parent().parent().child('balances/'+newData.val()).val()
            &&
            data.parent().parent().child('balances/Dirsh').val()
            >
						newData.parent().parent().child('balances/Dirsh').val()
            "
    	    },
      	  "amount":{
      	  	".validate":"
              	newData.isNumber()
                &&
                newData.parent().child('id').exists()
            		&&
                newData.parent().child('id').val()!=data.parent().child('id').val()
                &&
                newData.parent().child('receiverAddress').exists()
                &&
                newData.val()>=root.child('minimumAmountToSend').val()
  	            &&
                newData.parent().parent().parent()
    	          	.child(newData.parent().child('receiverAddress').val())
      	          .child('pendingReceived/'+newData.parent().child('id').val()
        	        +'/amount').val()==newData.val()
            		&&
                !data.parent().parent().parent()
    	          	.child(newData.parent().child('receiverAddress').val())
      	          .child('pendingReceived/'+newData.parent().child('id').val()).exists()
                "
	      	},
        	"receiverAddress":{
      	  	".validate":"
              	newData.parent().child('id').exists()
            	&&
                newData.parent().child('id').val()!=data.parent().child('id').val()
              &&
                newData.parent().child('amount').exists()
            	&&
                newData.isString()
        	    &&
                newData.parent().parent().parent()
    	            .child(newData.val())
      	          .child('pendingReceived/'
                         +newData.parent().child('id').val()
        	        +'/tokenType').val()==newData.parent().child('tokenType').val()"
          },
        	"$other":{".validate":"false"}
        },
        "received":{
          ".read": "$userId == auth.uid",
        	"$id":{
            ".write": "
              !data.exists()
            &&
              newData.hasChildren(['tokenType','amount','time'])
            &&
            (
              (
            	data.parent().parent().child('pendingReceived/'+$id).exists()
              &&
              data.parent().parent().child('pendingReceived/'+$id).val()
              !=
              newData.parent().parent().child('pendingReceived/'+$id).val()
            	&&
            	!newData.parent().parent().child('pendingReceived/'+$id).exists()
              &&
              newData.child('tokenType').val() == 
                data.parent().parent().child('pendingReceived/'+$id+'/tokenType').val()
              &&
              newData.child('amount').val()==
              	data.parent().parent().child('pendingReceived/'+$id+'/amount').val()
              &&
              newData.child('time').val()==
              	data.parent().parent().child('pendingReceived/'+$id+'/time').val()
              && 
              newData.child('senderAddress').val()==
              	data.parent().parent().child('pendingReceived/'+$id+'/senderAddress').val()
              )
              ||
              (
              newData.parent().parent().child('latestCouponId').exists()
              &&
              newData.child('tokenType').val() == root.child('coupons/'+
								newData.parent().parent().child('latestCouponId/').val()+'/tokenType').val()
              &&
              newData.child('amount').val() == root.child('coupons/'+
								newData.parent().parent().child('latestCouponId/').val()+'/amount').val()
              &&
              newData.child('time').val()==now
              && 
              newData.child('senderAddress').val()=='Coupon'
              && 
              newData.child('message').val()==null
              )
            )
            ",
            ".indexOn": ["time"],
      	    "tokenType":{
    	      	".validate":"newData.isString() && root.child('tokenTypes/'+newData.val()).exists()"
  	      	},
	          "amount":{
  	    	  	".validate":"newData.isNumber() && newData.val()>0"
	    	    },
            "time":{},
            "senderAddress":{
							".validate":"newData.isString()"
            },
      	  	"message":{
    	  	  	".validate":"newData.isString()&&newData.val().length<=10 && newData.val() == 
                data.parent().parent().parent().child('pendingReceived/'+$id+'/message').val()"
  	  	    },
      			"$other":{".validate":"false"}
	        }
        },
        "processingReceivedId":{
          ".read": "$userId == auth.uid || 'my-service-worker'==auth.uid",
        	".write":"
          'my-service-worker'==auth.uid?!newData.exists():true
          &&
         	!newData.exists()
        	||
        	(
        		newData.isString()
            &&
          	!newData.parent().child('pendingReceived/'+newData.val()).exists()
           	&&
            data.parent().child('pendingReceived/'+newData.val()).exists()
            
          )
          "
        },
        "pendingReceived":{
          ".read": "$userId == auth.uid",
        	"$id":{
          	".read":"!data.exists()",
        		".write":"
            (
              $userId==auth.uid
              &&
              data.exists()
              &&
              !newData.exists()
              &&
              newData.parent().parent().child('processingReceivedId').exists()
              &&
            	newData.parent().parent().child('processingReceivedId').val()
              !=
              data.parent().parent().child('processingReceivedId').val()
              &&
              newData.parent().parent().child('balances')
              	.child(data.child('tokenType').val()).exists()
              &&
              (
              	!data.parent().parent().child('balances')
              		.child(data.child('tokenType').val()).exists()
								||              
              	newData.parent().parent().child('balances')
              		.child(data.child('tokenType').val()).val()
              	>
              	data.parent().parent().child('balances')
              		.child(data.child('tokenType').val()).val()
              )
              &&
              newData.parent().parent().child('received/'+$id).exists()
              &&
              newData.parent().parent().child('received/'+$id).val()
              !=
              data.parent().parent().child('received/'+$id).val()
            )
            ||
            (
            	$userId!=auth.uid
              &&
            	(
                (
                	newData.parent().parent().parent().child(auth.uid+'/pendingSent/id').val()==$id
                	&&
                	newData.parent().parent().parent().child(auth.uid+'/pendingSent/id').val()
                	!=
                	data.parent().parent().parent().child(auth.uid+'/pendingSent/id').val()
                )
                ||
                (
                	auth.uid=='my-service-worker' //sending tokens via REST API
                  &&
                  newData.parent().parent().parent().child(
                    newData.parent().parent().parent().parent().child('sendApi/sender').val()
									+'/pendingSent/id/').val()==$id
                )
              )
	      			&&
              newData.hasChildren(['tokenType','amount','time'])
            )
            ||
            (
            	auth.uid === root.child('bountyDistributor').val()
              &&
              newData.hasChildren(['tokenType','amount','time'])
            )",
	        	"tokenType":{
  	      		".validate":"
              	(
                root.child('tokenTypes').child(newData.val()).exists()
              	&&
                	(
                  newData.parent().parent().parent().parent()
                	.child(auth.uid+'/pendingSent/tokenType').val()==newData.val()
                	)
                	||
                	(
                  'my-service-worker'==auth.uid //sending tokens via REST API
                  &&
              		newData.parent().parent().parent().parent()
                	.child(
                    newData.parent().parent().parent().parent().parent().child('sendApi/sender').val()
                    +'/pendingSent/tokenType').val()==newData.val()
                  
                	)
              	)
              ||
                (
            		auth.uid === root.child('bountyDistributor').val()
              	&&
                newData.val()=='Dirsh'
              	)
              "
    	    	},
      			"amount":{
      	  		".validate":"
              	newData.isNumber()
        				&&
                newData.val()>=root.child('minimumAmountToSend').val()
                &&
                (
                  (
                  $userId != auth.uid
                  &&
              		newData.parent().parent().parent().parent()
                	.child(auth.uid+'/pendingSent/amount').val()==newData.val()
                	)
                	||
                	(
                  'my-service-worker'==auth.uid //sending tokens via REST API
                  &&
              		newData.parent().parent().parent().parent()
                	.child(
                    newData.parent().parent().parent().parent().parent().child('sendApi/sender').val()
                    +'/pendingSent/amount').val()==newData.val()
                	)
              		||
                	auth.uid === root.child('bountyDistributor').val()
                )
      	    	"
	        	},
            "time":{
  	      		".validate":"newData.val()==now"
						},
      			"senderAddress":{//not required (for example, anynomous donations)
    					".validate":"newData.val()==auth.uid
              ||
              (
              	auth.uid=='my-service-worker'
                &&
                newData.val()==
                	newData.parent().parent().parent().parent().parent().child('sendApi/sender').val()
              )"
        		},
      	  	"message":{//not required
        			".validate":"newData.isString()&&newData.val().length <= 10
              &&
            	newData.parent().parent().parent().parent()
              .child(auth.uid)
              .child('sent/'+$id+'/message')
              .val()==newData.val()
              "
        		},
        		"$other":{".validate":"false"}
          }
        },
       	"sent":{
          ".read": "$userId == auth.uid||'my-service-worker'==auth.uid",
         	"$id":{
            ".write":"
            	!data.exists()
            	&&
            	(
              	$userId == auth.uid
              	||
              	(
              	'my-service-worker'==auth.uid // sending tokens via REST API
                &&
                newData.parent().parent().parent().parent().child('sendApi/sender').val()==$userId
                &&
                newData.parent().parent().parent().parent().child('sendApi/receiver').val()==
                  newData.child('receiverAddress').val()
                &&
                newData.parent().parent().parent().parent().child('sendApi/apiKey').val()==
                  data.parent().parent().child('apiKey').val()
                &&
                newData.parent().parent().parent().parent().child('sendApi/id').val()==$id
                )
              )
            &&
            	newData.hasChildren(['tokenType','amount','receiverAddress','time'])
            &&
            (
              (
                
              	newData.parent().parent().child('pendingSent/id').val()==$id
              &&
                newData.parent().parent().child('pendingSent/id').val()
                !=
                data.parent().parent().child('pendingSent/id').val()
              &&
                newData.parent().parent().child('pendingSent/tokenType').val()
                ==
                newData.child('tokenType').val()
              &&
                newData.parent().parent().child('pendingSent/amount').val()
                ==
                newData.child('amount').val()
              &&
                newData.parent().parent().child('pendingSent/receiverAddress').val()
                ==
                newData.child('receiverAddress').val()
              )
              ||
              (
              	newData.parent().parent().child('latestCouponId').exists()
            	&&
                newData.parent().parent().child('latestCouponId').val()
                !=
                data.parent().parent().child('latestCouponId').val()
              &&
                newData.parent().parent().child('coupons/'+newData.parent().parent()
                      .child('latestCouponId').val()+'/tokenType').val()
                ==
                newData.child('tokenType').val()
              &&
                !data.parent().parent().child('coupons/'+newData.parent().parent()
                      .child('latestCouponId').val()).exists()
              &&
                newData.parent().parent().child('coupons/'+newData.parent().parent()
                      .child('latestCouponId').val()+'/amount').val()
                ==
                newData.child('amount').val()
              &&
              	newData.child('receiverAddress').val()=='Coupon'
              &&
                !newData.child('message').exists()
              )
              ||
              (
              	newData.parent().parent().child('latestTokenType').exists()
              &&
                newData.parent().parent().child('latestTokenType').val()
                !=
                data.parent().parent().child('latestTokenType').val()
              &&
              	newData.child('tokenType').val()=='Dirsh'
              &&
              	newData.child('amount').val()==1000
              &&
              	newData.child('receiverAddress').val()=='Created '
                +newData.parent().parent().child('latestTokenType').val()+' token'
              &&
                !newData.child('message').exists()
              )
            )
            ",
            ".indexOn": ["time"],
          	"tokenType":{
        	    ".validate":"root.child('tokenTypes/'+newData.val()).exists()"
      	    },
    	      "amount":{
  	          ".validate":"newData.isNumber()&&newData.val()>=root.child('minimumAmountToSend').val()"
          	},
            "receiverAddress":{
        			".validate":"newData.isString()"
        		},
	        	"time":{
  	        	".validate":"newData.val()==now"
						},
            "message":{
             	".validate":"newData.isString()&&newData.val().length<=10
              &&
              newData.parent().parent().parent().parent()
                .child(newData.parent().child('receiverAddress').val())
                .child('pendingReceived/'+$id+'/message')
                .val()==newData.val()	
              "
          	},
          	"$other":{".validate":"false"}
          }
        },
        "latestCouponId":{//used only for permission enforcing
          ".read": "$userId == auth.uid || 'my-service-worker'==auth.uid",
         	".write":"
          	'my-service-worker'==auth.uid?!newData.exists():true
          	&&
            (
          	!newData.exists()
          	||
  	        (
	            (
            		!root.child('coupons/'+newData.val()).exists()
          			&&
          			newData.parent().parent().parent().child('coupons/'+newData.val()).exists()
        	    )
      	    	||
    	        (
  	          	root.child('coupons/'+newData.val()).exists()
	            	&&
            		!newData.parent().parent().parent().child('coupons/'+newData.val()).exists()
            	)
          	)
          )
          "
        },
        "latestTokenType":{ //used only for enforcing permissions
          ".read": "$userId == auth.uid || 'my-service-worker'==auth.uid",
					".write":"
          'my-service-worker'==auth.uid?!newData.exists():true
          &&
          (
          	!newData.exists()
            ||
            (
          		newData.parent().parent().parent().child('tokenTypes/'+newData.val()).exists()
              &&
              !root.child('tokenTypes/'+newData.val()).exists()
          		&&
          		newData.parent().child('sent/'+newData.val()).exists()
          	)
          )"
    		},
        "coupons":{ //actually gift card would be better name
          ".read": "$userId == auth.uid",
        	"$id":{
            ".write":"
            ( //create coupon
            	newData.parent().parent().parent().parent().child('coupons/'+$id).exists()
              &&
              !root.child('coupons/'+$id).exists()
            	&& 
              newData.hasChildren(['amount','tokenType'])
              &&
              newData.parent().parent().child('sent/'+$id).exists()
              &&
              !data.parent().parent().child('sent/'+$id).exists()
              &&
              newData.parent().parent().child('sent/'+$id+'/tokenType').val()==newData.child('tokenType').val()
              &&
              newData.parent().parent().child('sent/'+$id+'/amount').val()==newData.child('amount').val()
            )
            ||
            (//delete used coupon
            	!newData.exists()
              &&
              !data.parent().parent().parent().parent().child('coupons/'+$id).exists()
            )
            ",
        		"tokenType":{
         			".validate":"root.child('tokenTypes/'+newData.val()).exists()
              	&& newData.parent().parent().parent().parent().parent()
                .child('coupons/'+$id+'/tokenType').val()==newData.val()"
        		},
        		"amount":{
          		".validate":"newData.isNumber()
              && newData.parent().parent().parent().parent().parent()
                .child('coupons/'+$id+'/amount').val()==newData.val()"
		        },
    		  	"$other":{".validate":"false"}    
          }
        },
        "apiKey":{ // api key for robots. users can send tokens via REST API, if apiKey is created
          ".read": "$userId == auth.uid",
          ".write":"
          (
            !data.exists() && newData.isString() && newData.val().length == 30
          	&&
          	newData.parent().parent().parent().child('burned/apiKey/'+auth.uid).exists()
            &&
            !root.child('burned/apiKey/'+auth.uid).exists()
            &&
            data.parent().child('balances/Dirsh').val()-5*root.child('transactionFee').val()-
            	newData.parent().child('balances/Dirsh').val()>-0.000000001
            &&
            data.parent().child('balances/Dirsh').val()-5*root.child('transactionFee').val()-
            	newData.parent().child('balances/Dirsh').val()<0.000000001
          )
          ||
          (data.exists()&&!newData.exists())"
        }
      }
    },
    "tokenTypes":{
      //creation of new token type costs 1000 Dirsh tokens
      "$tokenType":{//simultaneously during creation transfer the full amount to creator address
        ".read":"true",
        ".write":"
        	!data.exists()
        	&&
          // 3 to 20 characters (alphabets or numbers)
         	$tokenType.matches(/^[A-Za-z0-9]{3,20}$/)
        	&&
          (
        		$tokenType=='Dirsh'
          	&&
          	auth.uid=='my-service-worker'
          	&&
          	newData.child('totalSupply').val()==90000000
        	)
        	||
          (
	        	newData.hasChildren(['totalSupply','creator'])
  	      	&& 
    	      root.child('users/'+auth.uid+'/balances/Dirsh').val()>=1000
      	  	&&
        	  root.child('users/'+auth.uid+'/balances/Dirsh').val()
	        		-newData.parent().parent().child('users/'+auth.uid+'/balances/Dirsh').val()
  	        	-1000>-0.000000001
    	    	&&
      	    root.child('users/'+auth.uid+'/balances/Dirsh').val()
        			-newData.parent().parent().child('users/'+auth.uid+'/balances/Dirsh').val()
          		-1000<0.000000001
	        	&&
  	        newData.parent().parent().child('users/'+auth.uid+'/balances/'+$tokenType).val()
    	      ==
      	    newData.child('totalSupply').val()
	        	&&
  	        newData.parent().parent().child('users/'+auth.uid+'/latestTokenType').exists()
    	      &&
      	    newData.parent().parent().child('burned/createdTokens/'+$tokenType).exists()
          )
          ",
        "totalSupply":{
          ".validate":"newData.isNumber() 
          && 
          	newData.val()>=1000000
          &&
            newData.val()<=10000000000"
        },
        "creator":{ 
          // could be used later for identifying the creator
          // for example, the creator could write description or website link for the token
          ".validate":"newData.val()==auth.uid"
        },
        "$other":{".validate":"false"}
      }
    },
    "coupons":{ //actually gift card would be better name
      "$id":{
        //creating coupons costs 5 x transaction fee
        //receiver of coupons does not know the issuer of the coupon
        //issuer of the coupon does not know who obtained the coupon
        ".read":"
        	(
          	!data.child('hidden').exists()
        		&&
          	data.child('hidden').val()!=true
          )
        	||
          auth.uid === 'my-service-worker'
        	",
        ".write":"
        	(
        	!data.exists()
        	&&
        	newData.hasChildren(['tokenType','amount'])
          &&
          newData.parent().parent().child('users/'+auth.uid+'/balances/Dirsh').exists()
        	&& 
          newData.parent().parent().child('users/'+auth.uid+'/balances/'
                +newData.child('tokenType').val()).exists()
          &&
        	newData.parent().parent().child('burned/sent/'+$id).exists()
        	&&
          newData.parent().parent().child('users/'+auth.uid+'/latestCouponId').exists()
        	&&
          newData.parent().parent().child('users/'+auth.uid+'/coupons/'+$id).exists()
        	)
          ||
          (
          data.exists()&&!newData.exists()
          &&
          	(
              data.parent().parent().child('users/'+auth.uid+'/balances/'
          		+data.child('tokenType').val()).exists()?
          		root.child('users/'+auth.uid+'/balances/'+data.child('tokenType').val()).val()
          		:
          		0
            )
          	-newData.parent().parent().child('users/'+auth.uid+'/balances/'
                                           +data.child('tokenType').val()).val()
          	+data.child('amount').val()>-0.000000001
          &&
          	(
              data.parent().parent().child('users/'+auth.uid+'/balances/'
          		+data.child('tokenType').val()).exists()?
          		root.child('users/'+auth.uid+'/balances/'+data.child('tokenType').val()).val()
          		:
          		0
            )
          	-newData.parent().parent().child('users/'+auth.uid+'/balances/'
                                           +data.child('tokenType').val()).val()
          	+data.child('amount').val()<0.000000001
          &&
          data.child('air').val()==true?
          	(
          	root.child('distribution/giftCard/'+$id).val()==true
          	&&
          	newData.parent().parent().child('distibution/giftCard/'+$id).val()==null
          	)
          :
          	true
          )
        	||
          (
        	auth.uid === 'my-service-worker' // airdrop
          &&
          newData.hasChildren(['tokenType','amount','air'])
          &&
          newData.child('tokenType').val()=='Dirsh'
          &&
          data.exists()?
          	(
              data.child('hidden').exists()?
              (
              	!newData.child('hidden').exists()
                &&
                newData.parent().parent().child('distribution/public/airdrop/balance').exists()
                &&
                newData.child('amount').val()
                -data.child('amount').val()
              	-root.child('distribution/public/airdrop/balance').val() 
              		/ (144000-root.child('distribution/public/airdrop/index').val()-1)
              	>-0.000000001
              	&&
              	newData.child('amount').val()
                -data.child('amount').val()
              	-root.child('distribution/public/airdrop/balance').val() 
              		/ (144000-root.child('distribution/public/airdrop/index').val()-1)
              	<0.000000001
              )
              :
              (
              	newData.child('hidden').val()==true
                &&
                newData.child('amount').val()==data.child('amount').val()
              )
          	)
          	:
          	(
              newData.parent().parent().child('distribution/public/airdrop/balance').exists()
							&&
              newData.child('amount').val()
              	-root.child('distribution/public/airdrop/balance').val() 
              		/ (144000-root.child('distribution/public/airdrop/index').val()+1)
              >-0.000000001
              &&
              newData.child('amount').val()
              	-root.child('distribution/public/airdrop/balance').val() 
              		/ (144000-root.child('distribution/public/airdrop/index').val()+1)
              <0.000000001
            )
        	)
        ",
        "tokenType":{
         	".validate":"root.child('tokenTypes/'+newData.val()).exists()"
        },
        "amount":{
          ".validate":"newData.isNumber()
          	&& newData.val()>=root.child('minimumAmountToSend').val()"
        },
        "air":{//airdrop
          ".validate":"auth.uid === 'my-service-worker' && newData.val()==true"
        },
        "hidden":{
          ".validate":"auth.uid === 'my-service-worker' && newData.val()==true"
        },
      	"$other":{".validate":"false"}
      }
    },
    "distribution":{
        //value of new gift cards is remainingBalance/(totalIndex-index)
        //the remainingBalance can rise, when the tokens are moved from bounty accounts
      ".read":"auth.uid === 'my-service-worker'",
      "public":{
      	".read":"true",
        ".write":"
          auth.uid === 'my-service-worker'
          &&
          !data.exists()
        ",
        ".validate":"newData.hasChildren(['airdrop','youtube','article','openSource','community'])",
    	  "airdrop":{
		  	  "balance":{
	      	  // Dirsh balance left for airdrop
	      	  ".write":"
            	auth.uid === 'my-service-worker'
            	&&
              (
            	(
          	  	data.val()-newData.val()
        	        -data.val()/(144000 - data.parent().child('index').val() - 1)
      	      	>-0.000000001
    	        	&&
  	            data.val()-newData.val()
	                -data.val()/(144000 - data.parent().child('index').val() - 1)
          	  	<0.000000001
        	    	&&
      	        newData.parent().child('index').val()==data.parent().child('index').val()+1
    	        	&&
  	            data.parent().child('index').val()>=110000? //bounties have ended
	              (
        	      	data.parent().parent().child('youtube').val()==0
      	          &&
    	            data.parent().parent().child('article').val()==0
  	              &&
	                data.parent().parent().child('openSource').val()==0
        	        &&
      	          data.parent().parent().child('community').val()==0
    	          )
  	          	:
	              true
              )
            	||
              (
              	data.parent().child('index').val()==110000 // end bounties
                &&
                newData.val()-data.val()
                -data.parent().parent().child('youtube').val()
                -data.parent().parent().child('article').val()
                -data.parent().parent().child('openSource').val()
                -data.parent().parent().child('community').val()
                <0.000000001
                &&
                newData.val()-data.val()
                -data.parent().parent().child('youtube').val()
                -data.parent().parent().child('article').val()
                -data.parent().parent().child('openSource').val()
                -data.parent().parent().child('community').val()
                >-0.000000001
                &&
                newData.parent().parent().child('youtube').val()==0
                &&
                newData.parent().parent().child('article').val()==0
                &&
                newData.parent().parent().child('openSource').val()==0
                &&
                newData.parent().parent().child('community').val()==0
              )
              )
            "
  	  		},
    		  "startTime":{// start time of airdrops
	  	      // linux ms time
	  	      ".validate":"!data.exists()&&newData.val()==now"
  		    },
	    		"index":{ 
        	  // latest shared gift card index
        	  ".write":"
            	auth.uid === 'my-service-worker'
            	&&
              data.exists()?
              (
              	newData.isNumber()
            		&&
              	newData.val()==data.val()+1
              )
            	:  
            	newData.val()==-1
          ",
  	    	},
      		"$other":{".validate":"false"}
        },
        "youtube":{
  	     	// tokens left for Youtube creators
  	     	".write":"auth.uid==root.child('bountyDistributor').val()||auth.uid === 'my-service-worker'",
          ".validate":"
          	newData.isNumber()&&newData.val()>=0
          	&&
          	data.exists()?
            (
              (
              auth.uid==root.child('bountyDistributor').val()
              &&
              newData.parent().parent().parent().child('users/'
                +newData.parent().parent().child('accountForBounty').val()
              	+'/pendingReceived/'+newData.parent().parent().child('idForBounty').val()).exists()
							&&                                                      
              data.val()-newData.val()
              -newData.parent().parent().parent().child('users/'
                +newData.parent().parent().child('accountForBounty').val()
              	+'/pendingReceived/'+newData.parent().parent().child('idForBounty').val()
                +'/amount'                                       
								).val()>-0.000000001
              &&
              data.val()-newData.val()
              -newData.parent().parent().parent().child('users/'
                +newData.parent().parent().child('accountForBounty').val()
              	+'/pendingReceived/'+newData.parent().parent().child('idForBounty').val()
                +'/amount'                                       
								).val()<0.000000001
              &&
              data.val()-newData.val()-15000>-0.000000001 // 15000 Dirsh reward per video
              &&
              data.val()-newData.val()-15000<0.000000001
              )
              ||
              (
                auth.uid=='my-service-worker'  //end bounties
                &&
              	data.exists()
                &&
              	data.parent().child('airdrop/index').val()==110000
                &&
                newData.val()==0
                &&
                newData.parent().child('airdrop/balance').val()>data.parent().child('airdrop/balance').val()
              )
            )
          	:
            (
              auth.uid=='my-service-worker'
              &&
              !data.exists()
              &&
              newData.val()==9000000 // start distribution
            )
          "
	      },
      	"article":{
      	  // tokens left for article authors
  	     	".write":"auth.uid==root.child('bountyDistributor').val()||auth.uid === 'my-service-worker'",
          ".validate":"
          	newData.isNumber()&&newData.val()>=0
          	&&
          	data.exists()?
            (
              (
              auth.uid==root.child('bountyDistributor').val()
              &&
              newData.parent().parent().parent().child('users/'
                +newData.parent().parent().child('accountForBounty').val()
              	+'/pendingReceived/'+newData.parent().parent().child('idForBounty').val()).exists()
							&&                                                      
              data.val()-newData.val()
              -newData.parent().parent().parent().child('users/'
                +newData.parent().parent().child('accountForBounty').val()
              	+'/pendingReceived/'+newData.parent().parent().child('idForBounty').val()
                +'/amount'                                       
								).val()>-0.000000001
              &&
              data.val()-newData.val()
              -newData.parent().parent().parent().child('users/'
                +newData.parent().parent().child('accountForBounty').val()
              	+'/pendingReceived/'+newData.parent().parent().child('idForBounty').val()
                +'/amount'                                       
								).val()<0.000000001
              &&
              data.val()-newData.val()-15000>-0.000000001 // 15000 Dirsh reward per video
              &&
              data.val()-newData.val()-15000<0.000000001
              )
          		||
              (
              	auth.uid=='my-service-worker'  //end bounties
              	&&
              	data.exists() //end bounties
                &&
              	data.parent().child('airdrop/index').val()==110000
                &&
                newData.val()==0
                &&
                newData.parent().child('airdrop/balance').val()>data.parent().child('airdrop/balance').val()
              )
            )
          	:
            (
              auth.uid=='my-service-worker'
              &&
              !data.exists()
              &&
              newData.val()==9000000 // start distribution
            )
            "
    	  },
  	    "openSource":{
	        // tokens left for open source contributors
	        ".write":"auth.uid==root.child('bountyDistributor').val()||auth.uid === 'my-service-worker'",
          ".validate":"
          	newData.isNumber()&&newData.val()>=0
          	&&
          	data.exists()?
            (
              (
              auth.uid==root.child('bountyDistributor').val()
              &&
              newData.parent().parent().parent().child('users/'
                +newData.parent().parent().child('accountForBounty').val()
              	+'/pendingReceived/'+newData.parent().parent().child('idForBounty').val()).exists()
							&&                                                      
              data.val()-newData.val()
              -newData.parent().parent().parent().child('users/'
                +newData.parent().parent().child('accountForBounty').val()
              	+'/pendingReceived/'+newData.parent().parent().child('idForBounty').val()
                +'/amount'                                       
								).val()>-0.000000001
              &&
              data.val()-newData.val()
              -newData.parent().parent().parent().child('users/'
                +newData.parent().parent().child('accountForBounty').val()
              	+'/pendingReceived/'+newData.parent().parent().child('idForBounty').val()
                +'/amount'                                       
								).val()<0.000000001
              &&
              (
                (
              	data.val()-newData.val()-15000>-0.000000001 //critical bug fix reward
              	&&
              	data.val()-newData.val()-15000<0.000000001
                )
                ||
                (
              	data.val()-newData.val()-1500>-0.000000001 // medium level contribution reward
              	&&
              	data.val()-newData.val()-1500<0.000000001
                )
                ||
                (
              	data.val()-newData.val()-150>-0.000000001 // minor contribution level reward
              	&&
              	data.val()-newData.val()-150<0.000000001
                )
              )
              )
              ||
              (
                auth.uid=='my-service-worker'  //end bounties
              	&&
              	data.exists() //end bounties
                &&
              	data.parent().child('airdrop/index').val()==110000
                &&
                newData.val()==0
                &&
                newData.parent().child('airdrop/balance').val()>data.parent().child('airdrop/balance').val()
              )
            )
          	:
            (
              auth.uid=='my-service-worker'
              &&
              !data.exists()
              &&
              newData.val()==9000000 // start distribution
              
            )
            "
    	  },
  	    "community":{
  	      // tokens left for community rewards
  	      ".write":"auth.uid==root.child('bountyDistributor').val()||auth.uid === 'my-service-worker'",
          ".validate":"
          	newData.isNumber()&&newData.val()>=0
          	&&
          	data.exists()?
            (
              auth.uid==root.child('bountyDistributor').val()
              &&
              newData.parent().parent().parent().child('users/'
                +newData.parent().parent().child('accountForBounty').val()
              	+'/pendingReceived/'+newData.parent().parent().child('idForBounty').val()).exists()
							&&                                                      
              data.val()-newData.val()
              -newData.parent().parent().parent().child('users/'
                +newData.parent().parent().child('accountForBounty').val()
              	+'/pendingReceived/'+newData.parent().parent().child('idForBounty').val()
                +'/amount'                                       
								).val()>-0.000000001
              &&
              data.val()-newData.val()
              -newData.parent().parent().parent().child('users/'
                +newData.parent().parent().child('accountForBounty').val()
              	+'/pendingReceived/'+newData.parent().parent().child('idForBounty').val()
                +'/amount'                                       
								).val()<0.000000001
              &&
              (
                (
              	data.val()-newData.val()-1000000>-0.000000001
              	&&
              	data.val()-newData.val()-1000000<0.000000001
                )
                ||
                (
              	data.val()-newData.val()-100000>-0.000000001
              	&&
              	data.val()-newData.val()-100000<0.000000001
                )
                ||
                (
              	data.val()-newData.val()-10000>-0.000000001
              	&&
              	data.val()-newData.val()-10000<0.000000001
                )
                ||
                (
              	data.val()-newData.val()-1000>-0.000000001
              	&&
              	data.val()-newData.val()-1000<0.000000001
                )
                ||
                (
              	data.val()-newData.val()-100>-0.000000001
              	&&
              	data.val()-newData.val()-100<0.000000001
                )
              )
              ||
              (
                auth.uid=='my-service-worker'  //end bounties
              	&&
              	data.exists() //end bounties
                &&
              	data.parent().child('airdrop/index').val()==110000
                &&
                newData.val()==0
                &&
                newData.parent().child('airdrop/balance').val()>data.parent().child('airdrop/balance').val()
              )
            )
          	:
            (
              auth.uid=='my-service-worker'
              &&
              !data.exists()
              &&
              newData.val()==18000000 // start distribution
            )
          "
	      },
      	"$other":{".validate":"false"}
      },
      "accountForBounty":{ //temporary account number value to distribute bounty
        ".write":"
        	newData.isString()
        	&&
        	newData.parent().parent().child('users/'+newData.val()+'/pendingReceived/'
                          +newData.parent().child('idForBounty').val()).exists()
        	&&
        	auth.uid==root.child('bountyDistributor').val()
        "
      },
    	"idForBounty":{ //temporary transaction id to distribute bounty
        ".write":"
        newData.isString()
        &&
        newData.parent().child('bountySent/'+newData.val()).exists()
        &&
        auth.uid==root.child('bountyDistributor').val()
        "
      },
      "latest":{ //latest airdrop gift card
        ".write":"newData.hasChildren(['id','password','mediaType','messageId'])",
        "id":{// id in root/coupons/+id
          ".validate":"newData.parent().parent().parent().child('coupons/'+newData.val()).exists()"
        },
  	    "password":{
          ".validate":"newData.isString()"
        },// password shared in social media
        "mediaType":{
          ".validate":"
          	newData.val()==0
          	||
          	newData.val()==1
          	||
          	newData.val()==2
          "
        },// social media type of latest gift card
        "messageId":{
          ".validate":"newData.isString()"
        },
      	"$other":{".validate":"false"}
      },
      "giftCard":{
        // every time a gift card is shared in social media share max three $id:s from this list
        // delete all previous social media posts
        "$id":{
          ".read":"true",
          ".write":"
          (
          	data.exists()
          	&&
          	!newData.exists()
          	&&
          	root.child('coupons/'+$id).exists()
          	&&
          	!newData.parent().parent().parent().child('coupons/'+$id).exists()
          )
          ||
          (
          	auth.uid === 'my-service-worker'
            &&
            newData.val()==true
          )
          ",
          "$other":{".validate":"false"}
        }
      },
      "bountySent":{ // only Dirsh can be delivered as bounty, not custom tokens
        ".read":"auth.uid==root.child('bountyDistributor').val()",
      	"$id":{
          ".write":"newData.hasChildren(['receiverAddress','amount','time'])",
          "receiverAddress":{
          	".validate":"newData.parent().parent().parent().child('accountForBounty').val()==newData.val()"
          },
          "amount":{
          	".validate":"
            newData.parent().parent().parent().parent().child('users/'
            	+newData.parent().parent().parent().child('accountForBounty').val()
              +'/pendingReceived/'+newData.parent().parent().parent().child('idForBounty').val()).exists()
            &&
              newData.parent().parent().parent().parent().child('users/'
            	+newData.parent().parent().parent().child('accountForBounty').val()
              +'/pendingReceived/'+newData.parent().parent().parent().child('idForBounty').val()
              +'/amount').val()==newData.val()"
          },
          "time":{
            ".validate":"newData.val()==now"
          },
      		"$other":{".validate":"false"}
        }
      },
      "$other":{".validate":"false"}
    },
    "bountyDistributor":{
      //string with auth.uid of bounty distributor account
      ".read":"!data.exists()",
      ".write":"auth.uid=='my-service-worker' && newData.isString()"
    },
    "founderAccount":{
      ".read":"!data.exists()",
      ".write":"'my-service-worker'==auth.uid && newData.isString()"
    },
    "sendApi":{
      ".read":"auth.uid=='my-service-worker'",
      ".write":"newData.hasChildren(['sender','receiver','id','apiKey'])",
      "sender":{
      	".validate":"newData.isString()"
      },
      "receiver":{
        ".validate":"newData.isString()"
      },
      "id":{
        ".validate":"newData.isString()"
      },
      "apiKey":{
        ".validate":"newData.isString()"
      },
			"$other":{".validate":"false"}
    }
  }
}